{
	"name": "dataflow_4_union",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp_US",
						"type": "DatasetReference"
					},
					"name": "empUS"
				},
				{
					"dataset": {
						"referenceName": "emp_IND",
						"type": "DatasetReference"
					},
					"name": "empIND"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "highsalary",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "lowsalary",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          name as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> empUS",
				"source(output(",
				"          ID as integer,",
				"          name as string,",
				"          salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> empIND",
				"empUS, empIND union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"union1 aggregate(salary = avg(salary),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"union1, aggregate1 join(union1@salary == aggregate1@salary,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 split(salary>62400,",
				"     disjoint: false) ~> split1@(high, low)",
				"join1 select(mapColumn(",
				"          ID,",
				"          name,",
				"          salary = union1@salary,",
				"          salaryprime = aggregate1@salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@high select(mapColumn(",
				"          ID,",
				"          name,",
				"          salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@low select(mapColumn(",
				"          ID,",
				"          name,",
				"          salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string",
				"     ),",
				"     filePattern:'concat(\\'highsalary.csv\\')',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductKey as string,",
				"          OrderDateKey as string,",
				"          DueDateKey as string,",
				"          ShipDateKey as string,",
				"          CustomerKey as string,",
				"          PromotionKey as string,",
				"          CurrencyKey as string,",
				"          SalesTerritoryKey as string,",
				"          SalesOrderNumber as string,",
				"          SalesOrderLineNumber as string,",
				"          RevisionNumber as string,",
				"          OrderQuantity as string,",
				"          UnitPrice as string,",
				"          ExtendedAmount as string,",
				"          UnitPriceDiscountPct as string,",
				"          DiscountAmount as string,",
				"          ProductStandardCost as string,",
				"          TotalProductCost as string,",
				"          SalesAmount as string,",
				"          TaxAmt as string,",
				"          Freight as string,",
				"          CarrierTrackingNumber as string,",
				"          CustomerPONumber as string,",
				"          OrderDate as string,",
				"          DueDate as string,",
				"          ShipDate as string",
				"     ),",
				"     filePattern:'concat(\\'lowsalary.csv\\')',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}